
############################################################################
#                                                                          #
#              tc-ext-tools common functions and definitions               #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  (C) Copyright 2011 Sercan Arslan
#

THIS=$(basename $0)

if [ $(id -u) == 0 ] ; then
     if [ "$THIS" != "installit" ]; then
          echo "${RED}Do not run ${THIS} as root!${NORMAL}"
          exit 1
     fi
else
     if [ "$THIS" = "installit" ]; then
          echo "${RED}You need to run ${THIS} as root!${NORMAL}"
          exit 1
     fi
fi

# default configuration
if [ -f "$TCEXTTOOLS_ROOT/etc/conf.d/tc-ext-tools.conf" ]; then
     . "$TCEXTTOOLS_ROOT/etc/conf.d/tc-ext-tools.conf"
else
     echo "${RED}${THIS}: default configuration file not found!${NORMAL}"
     exit 1
fi

# user configuration
if [ -f "$HOME/.config/tc-ext-tools.conf" ]; then
     . "$HOME/.config/tc-ext-tools.conf"
else
    echo "${RED}${THIS}: user configuration file not found!${NORMAL}"
    exit 1
fi

# message print function
print_it() {

  case  "$1" in
     error)
           [ -z "$2" ] && echo -e "${TCEXTTOOLS_MESSAGE_COLOR}${1}${NORMAL}"
           echo -e "${TCEXTTOOLS_ERROR_COLOR}${2}${NORMAL}"
           ;;
     warning)
           [ -z "$2" ] && echo -e "${TCEXTTOOLS_MESSAGE_COLOR}${1}${NORMAL}"
           echo -e "${TCEXTTOOLS_WARNING_COLOR}${2}${NORMAL}"
           ;;
     hilight)
           [ -z "$2" ] && echo -e "${TCEXTTOOLS_MESSAGE_COLOR}${1}${NORMAL}"
           echo -e "${TCEXTTOOLS_HILIGHT_COLOR}${2}${NORMAL}"
           ;;
     *)
           echo -e "${TCEXTTOOLS_MESSAGE_COLOR}${1}${NORMAL}"
           ;;
  esac

}

# sets the package build dependencies
set_depends() {

   BUILD_DEPENDS=( ${TCEXTTOOLS_DEPENDS[@]} ${BUILD_DEPENDS[@]} )

}

# sets the package source variables
set_source() {

     SOURCE_URL_TYPE="${SOURCE%%::*}"
     if [ "$SOURCE_URL_TYPE" = "$SOURCE" ]; then
          SOURCE_URL_TYPE=""
     else
          SOURCE=${SOURCE#*::}
          SOURCE_NAME=${PACKAGE}-${VERSION}.tar.xz
          SOURCE_TOPDIR=${PACKAGE}-${VERSION}     
     fi

     if [ -z "$SOURCE_NAME" ]; then
          SOURCE_NAME=${SOURCE##*/}
     fi

     if [ ! "${SOURCE_NAME%.bz2}" = "$SOURCE_NAME" ]; then
            SOURCE_TYPE="bz2"
            SOURCE_NAME_CONVERTED="${SOURCE_NAME%.bz2}.xz"
     elif [ ! "${SOURCE_NAME%.gz}" = "$SOURCE_NAME" ]; then
            SOURCE_TYPE="gz"
            SOURCE_NAME_CONVERTED="${SOURCE_NAME%.gz}.xz"
     elif [ ! "${SOURCE_NAME%.tgz}" = "$SOURCE_NAME" ]; then
            SOURCE_NAME_CONVERTED="${SOURCE_NAME%.tgz}.tar.xz"
            SOURCE_TYPE="tgz"
     elif [ ! "${SOURCE_NAME%.tbz2}" = "$SOURCE_NAME" ]; then
            SOURCE_NAME_CONVERTED="${SOURCE_NAME%.tbz2}.tar.xz"
            SOURCE_TYPE="tbz2"
     elif [ ! "${SOURCE_NAME%.zip}" = "$SOURCE_NAME" ]; then
            SOURCE_TYPE="zip"
            SOURCE_NAME_CONVERTED="${SOURCE_NAME%.zip}.tar.xz"
     elif [ ! "${SOURCE_NAME%.xz}" = "$SOURCE_NAME" ]; then
            SOURCE_TYPE="xz"
            SOURCE_NAME_CONVERTED="$SOURCE_NAME"
     elif [ ! "${SOURCE_NAME%.txz}" = "$SOURCE_NAME" ]; then
            SOURCE_TYPE="txz"
            SOURCE_NAME_CONVERTED="$SOURCE_NAME"
     elif [ ! "${SOURCE_NAME%.tar}" = "$SOURCE_NAME" ]; then
            SOURCE_TYPE="tar"
            SOURCE_NAME_CONVERTED="${SOURCE_NAME%.tar}.tar.xz"
     else
            if [ -z "$SOURCE" ]; then
                 SOURCE_TYPE=none
            else
                 SOURCE_TYPE="custom"
                 [ -z "$SOURCE_NAME_CONVERTED" ] && SOURCE_NAME_CONVERTED="${SOURCE_NAME%.*}.tar.xz"
            fi
     fi

     if [ -z "$SOURCE_TOPDIR" ]; then
          [ -d "$PACKAGE_SRC_TEMP" ] && SOURCE_TOPDIR=$(ls $PACKAGE_SRC_TEMP)
          [ -z "$SOURCE_TOPDIR" ] && SOURCE_TOPDIR=${PACKAGE}-${VERSION}
     fi

     if [ -n "$SOURCE_TOPDIR" ]; then
          PACKAGE_SOURCE_TOPDIR="$PACKAGE_SRC_TEMP/$SOURCE_TOPDIR"
     fi

     if [ "$SOURCE_TYPE" != "none" ]; then
          PACKAGE_SOURCE="$_PACKAGE_SRC/$SOURCE_NAME"
          PACKAGE_SOURCE_CONVERTED="$_PACKAGE_SRC/$SOURCE_NAME_CONVERTED"
     fi

}

# sets the package extensions
set_extensions() {

   if [ -z "${EXTENSIONS[*]}" ]; then
        if [ -d "$PACKAGE_EXTENSIONS" ]; then
             for i in $(find "$PACKAGE_EXTENSIONS" -type f -name install)
             do
                 EXTENSION=$(basename ${i%/install})
                 PACKAGE_EXTENSION=( ${PACKAGE_EXTENSION[@]} ${EXTENSION} )
             done
        fi
   else
        PACKAGE_EXTENSION=( ${EXTENSIONS[@]} )
   fi

   NUMBER_OF_EXTENSIONS=${#PACKAGE_EXTENSION[@]}

   if [ "$NUMBER_OF_EXTENSIONS" == 0 ]; then
        echo "Error! There is no extension available."
        exit 1
   elif [ "$NUMBER_OF_EXTENSIONS" == 1 ]; then
        SINGLE_EXTENSION_PACKAGE=1
   else
        SINGLE_EXTENSION_PACKAGE=0
   fi

   for (( i=0; i<$NUMBER_OF_EXTENSIONS; i++ ))
   do
       PACKAGE_EXTENSION_COMMON[$i]="$PACKAGE_EXTENSIONS/${PACKAGE_EXTENSION[$i]}/common"
       PACKAGE_EXTENSION_INSTALL[$i]="$PACKAGE_EXTENSIONS/${PACKAGE_EXTENSION[$i]}/install"
       PACKAGE_EXTENSION_DEP[$i]="$PACKAGE_EXTENSIONS/${PACKAGE_EXTENSION[$i]}/dep"
       PACKAGE_EXTENSION_TCEINSTALLED[$i]="$PACKAGE_EXTENSIONS/${PACKAGE_EXTENSION[$i]}/tce.installed"
   done

   for (( i=0; i<$NUMBER_OF_EXTENSIONS; i++ ))
   do
       unset NAME ICON DESKTOP

       . "$PACKAGE_COMMON"

       if [ -f "${PACKAGE_EXTENSION_COMMON[$i]}" ]; then
            . "${PACKAGE_EXTENSION_COMMON[$i]}"
       fi

       if [ -z "$NAME" ]; then
            PACKAGE_EXTENSION_NAME[$i]=${PACKAGE_EXTENSION[$i]}
       else
            PACKAGE_EXTENSION_NAME[$i]="$NAME"
       fi

       if [ -n "$(echo ${PACKAGE_EXTENSION_NAME[$i]} | grep KERNEL)" ]; then
            PACKAGE_EXTENSION_NAME[$i]=$(echo ${PACKAGE_EXTENSION_NAME[$i]} | sed "s/KERNEL/${KERNEL}/")
       fi

       if [ -n "$ICON" ]; then
          PACKAGE_EXTENSION_ICON[$i]="$ICON"
          if [ -n "$DESKTOP" ]; then
               PACKAGE_EXTENSION_DESKTOP[$i]="$DESKTOP"
          else
               PACKAGE_EXTENSION_DESKTOP[$i]="$PREFIX/share/applications/${PACKAGE_EXTENSION_NAME[$i]}.desktop"
          fi
       fi

       PACKAGE_EXTENSION_BINDIR[$i]="$PACKAGE_BIN/${PACKAGE_EXTENSION_NAME[$i]}"
       PACKAGE_EXTENSION_PKGDIR[$i]="$PACKAGE_PKG/${PACKAGE_EXTENSION_NAME[$i]}"
       PACKAGE_EXTENSION_TCZ[$i]="$PACKAGE_EXTENSION_PKGDIR/${PACKAGE_EXTENSION_NAME[$i]}.tcz"
       _PACKAGE_EXTENSION_DEP[$i]="$PACKAGE_EXTENSION_PKGDIR/${PACKAGE_EXTENSION_NAME[$i]}.tcz.dep"
       PACKAGE_EXTENSION_MD5SUM[$i]="$PACKAGE_EXTENSION_PKGDIR/${PACKAGE_EXTENSION_NAME[$i]}.tcz.md5.txt"
       PACKAGE_EXTENSION_INFO[$i]="$PACKAGE_EXTENSION_PKGDIR/${PACKAGE_EXTENSION_NAME[$i]}.tcz.info"
       PACKAGE_EXTENSION_LIST[$i]="$PACKAGE_EXTENSION_PKGDIR/${PACKAGE_EXTENSION_NAME[$i]}.tcz.list"
   done

}

# sets the date, time, and seconds
set_date() {

    DATE=$(date +%Y/%m/%d)
    TIME=$(date +%H:%M:%S)
    SECONDS=$(date +%s)

}

set_date

# tc system
TCUSER=$(cat /etc/sysconfig/tcuser)
TCE_DIR=$(cat /opt/.tce_dir)
TCLOOP=/tmp/tcloop
KERNEL=$(uname -r)

# package variables
PACKAGE_ROOT="$PWD"
PACKAGE_COMMON="$PACKAGE_ROOT/common"
PACKAGE_BUILD="$PACKAGE_ROOT/build"
PACKAGE_EXTENSIONS="$PACKAGE_ROOT/extensions"
PACKAGE_FILES_LIST="$PACKAGE_EXTENSIONS/list"
PACKAGE_SRC="$PACKAGE_ROOT/src"
PACKAGE_PATCHES="$PACKAGE_SRC/patches"

if [ -f "$PACKAGE_COMMON" ]; then
     . "$PACKAGE_COMMON"

     _PACKAGE_ROOT="$TCEXTTOOLS_STORAGE/$PACKAGE"
     PACKAGE_BIN="$_PACKAGE_ROOT/bin"
     _PACKAGE_SRC="$_PACKAGE_ROOT/src"
     PACKAGE_LOG="$_PACKAGE_ROOT/log"
     PACKAGE_PKG="$_PACKAGE_ROOT/pkg"
     PACKAGE_BIN_TEMP="$PACKAGE_BIN/temp"
     PACKAGE_SRC_TEMP="$_PACKAGE_SRC/temp"
     PACKAGE_PKG_TEMP="$PACKAGE_PKG/temp"
     PACKAGE_CONFIGURE_LOG="$PACKAGE_LOG/configure.txt"
     PACKAGE_COMPILE_LOG="$PACKAGE_LOG/compile.txt"
     PACKAGE_INSTALL_LOG="$PACKAGE_LOG/install.txt"
     PACKAGE_BUILD_LOG="$PACKAGE_LOG/build.txt"
     PACKAGE_MESSAGE_LOG="$PACKAGE_LOG/message.txt"
     PACKAGE_MESSAGE_LOG_2="$PACKAGE_LOG/message2.txt"
     PACKAGE_INSTALL_ROOT="$PACKAGE_BIN/root"
     PACKAGE_PACKAGE="$PACKAGE_PKG/${PACKAGE}.tar.bz2"
     PACKAGE_PACKAGE_ENCRYPTED="$PACKAGE_PKG/${PACKAGE}.tar.bz2.bfe"

     INSTALL_ROOT="$PACKAGE_INSTALL_ROOT"
     PREFIX=/usr/local

     set_depends
     set_source
     set_extensions

     # shortened variables for use in package build
     P_ROOT="$PACKAGE_ROOT"
     _P_ROOT="${_PACKAGE_ROOT}"
     P_NAME="$PACKAGE"
     P_VER="$VERSION"
     P_SRC="$PACKAGE_SRC"
     _P_SRC="${_PACKAGE_SRC}"
     P_SRC_TEMP="$PACKAGE_SRC_TEMP"
     P_BIN="$PACKAGE_BIN"
     S_TOP="$SOURCE_TOPDIR"
     S_ROOT="$PACKAGE_SOURCE_TOPDIR"
     I_ROOT="$INSTALL_ROOT"

     # create directories
     [ -d "$TCEXTTOOLS_STORAGE" ] || sudo install -m 755 -d -o "$TCUSER" -g staff "$TCEXTTOOLS_STORAGE"
     [ -d "$PACKAGE_BIN" ] || install -m 755 -d "$PACKAGE_BIN"
     [ -d "${_PACKAGE_SRC}" ] || install -m 755 -d "${_PACKAGE_SRC}"
     [ -d "$PACKAGE_PKG" ] || install -m 755 -d "$PACKAGE_PKG"
     [ -d "$PACKAGE_LOG" ] || install -m 755 -d "$PACKAGE_LOG"

elif [ "$THIS" != "boostit" ]; then
     print_it error "You must boost it first!"
     exit 1
fi

[ -z "$CFLAGS" ] && export CFLAGS="$TCEXTTOOLS_CFLAGS"
[ -z "$CXXFLAGS" ] && export CXXFLAGS="$TCEXTTOOLS_CXXFLAGS"
[ -z "$LDFLAGS" ] && export LDFLAGS="$TCEXTTOOLS_LDFLAGS"

# package build
if [ "$THIS" != "boostit" ]; then
     if [ -f "$PACKAGE_BUILD" ]; then
          . "$PACKAGE_BUILD"
     else
          print_it error "You must boost it first!"
          exit 1
     fi
fi

