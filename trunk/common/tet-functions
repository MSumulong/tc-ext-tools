
############################################################################
#                                                                          #
#                       tc-ext-tools shell environment                     #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Copyright (c) 2011 Sercan Arslan <arslanserc@gmail.com>
#

_tet_common() {

   if [ -f "$HOME/.config/tet.conf" ]; then
        . "$HOME/.config/tet.conf"
   else
        echo "$tc-ext-tools user configuration not found"
        return 1
   fi

   if [ ! -d "$TET_PACKAGES_DATABASE" ]; then
        echo "You need to run update-tet-database at least once before using tet functions"
        return 1
   fi

   PACKAGE="$1"
   if [ -f "$TET_PACKAGES_DATABASE/$PACKAGE" ]; then
        shift
        ARGS="$@"
   elif [ -f common ]; then
        . common
        ARGS="$@"
   fi

}

is_integer() {

    [ "$1" -eq "$1" ] > /dev/null 2>&1
    return $?

}

# tc-ext-tools cd: change directory to package root
tetcd() {

   _tet_common $@ || return 1

   if [ -z "$@" ]; then
        cd "$TET_PACKAGES"
        return 0
   fi

   if [ -f "$TET_PACKAGES_DATABASE/$PACKAGE" ]; then
        . "$TET_PACKAGES_DATABASE/$PACKAGE"
   else
        echo "tetcd: No such package $PACKAGE"
        return 1
   fi

   if [ ! -d "$PACKAGE_ROOT" ]; then
        echo "$tetcd: Package $PACKAGE root directory does not exist"
        return 1
   fi

   cd "$PACKAGE_ROOT"

}

# tc-ext-tools ls: list package contents
tetls() {

   _tet_common $@ || return 1

   if [ -z "$@" ]; then
        ls "$TET_PACKAGES_DATABASE"
        return 0
   fi

   if [ -f "$TET_PACKAGES_DATABASE/$PACKAGE" ]; then
        . "$TET_PACKAGES_DATABASE/$PACKAGE"
   else
        echo "tetls: No such package $PACKAGE"
        return 1
   fi

   cd "$PACKAGE_ROOT"
   ls $ARGS
   cd - > /dev/null

}

# tc-ext-tools find: find in package
tetfind() {

   _tet_common $@ || return 1

   if [ -z "$@" ]; then
        find "$TET_PACKAGES" -not -path *.svn*
        return 0
   fi

   if [ -f "$TET_PACKAGES_DATABASE/$PACKAGE" ]; then
        . "$TET_PACKAGES_DATABASE/$PACKAGE"
   else
        echo "tetfind: No such package $PACKAGE"
        return 1
   fi

   cd "$PACKAGE_ROOT"
   find $ARGS -not -path *.svn*
   cd - > /dev/null

}

# tc-ext-tools edit: edit package files
teted() {

   _tet_common $@ || return 1

   if [ -z "$@" ]; then
        echo "teted: package ?"
        return 1
   fi

   if [ -f "$TET_PACKAGES_DATABASE/$PACKAGE" ]; then
        . "$TET_PACKAGES_DATABASE/$PACKAGE"
   else
        echo "teted: No such package $PACKAGE"
        return 1
   fi

   if [ -z "$TET_EDITOR" ]; then
        echo "teted: You need to set tc-ext-tools editor"
        return 1
   fi

   if ! which "$TET_EDITOR" >/dev/null 2>&1; then
        echo "teted: Editor $TET_EDITOR not found"
        return 1
   fi

   if [ -z "$ARGS" ]; then
        FILES=`find $PACKAGE_ROOT -type f -a -not -path *.svn*`
   else
        unset FILES
        for FILE in $ARGS
        do
           FILES="$(find $PACKAGE_ROOT -type f -a -not -path *.svn* -name $FILE) $FILES"
        done
   fi

   file_cnt=0
   for i in $FILES
   do
      file_cnt=`expr $file_cnt + 1`
   done

   if [ $file_cnt = 0 ]; then
        echo "teted: No such file(s)"
        return 1
   elif [ $file_cnt = 1 ]; then
        $TET_EDITOR $FILES &
   else
        echo "teted: More than one file found"
        echo "Choose one of the options below"
        index=0
        echo "[$index]: quit"
        for i in $FILES
        do
            index=`expr $index + 1`
            echo "[$index]: ${i#$PACKAGE_ROOT/}"
        done
        index=`expr $index + 1`
        echo "[$index]: all"

        read ans
        if ! is_integer $ans; then
            echo "teted: bad number"
            return 1
        elif [ $ans -gt $index -o $ans -lt 0 ]; then
            echo "teted: invalid option"
            return 1
        fi

        index=0
        for FILE in $FILES
        do
            index=`expr $index + 1`
            if [ $index = $ans ]; then
                 $TET_EDITOR $FILE &
                 return 0
            fi
        done
        index=`expr $index + 1`
        if [ $index = $ans ]; then
             for FILE in $FILES
             do
                 $TET_EDITOR $FILE &
             done
        fi
   fi

}


