#!/bin/sh

############################################################################
#                                                                          #
#                      buildit: Builds the package                         #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  (C) Copyright 2011 Sercan Arslan
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/init.d/tc-ext-tools.sh" ]; then
     . "$TCEXTTOOLS_ROOT/etc/init.d/tc-ext-tools.sh"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

print_usage(){

   echo -e "${TCEXTTOOLS_ERROR_COLOR}${THIS} usage:\n\t${TCEXTTOOLS_MESSAGE_COLOR}${THIS} (clean|clear)|load|download|convert|unpack|patch|configure|compile|install|split|strip|create|check|generate|package|compress|encrypt|show|help${NORMAL}"

}

clean_it() {

   print_it "Cleaning the package $PACKAGE ... \c"
   cleanit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

download_it() {

   if [ -f "$PACKAGE_SOURCE" ]; then
        print_it warning "The package $PACKAGE source is already downloaded."
        print_it warning "Run downloadit to force it to download the package source."
        exit 0
   fi

   print_it "Downloading the package $PACKAGE source ... \c"
   downloadit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show download"
        exit 1
   fi
   print_it hilight "successful!"

}

convert_it() {

   if [ -f "$PACKAGE_SOURCE_CONVERTED" ]; then
        print_it warning "The package $PACKAGE source is already converted."
        print_it warning "Run convertit to force it to convert the package source."
        exit 0
   fi

   print_it "Converting the package $PACKAGE source ... \c"
   convertit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

unpack_it() {

   print_it "Unpacking the package $PACKAGE source ... \c"
   unpackit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

load_it() {

   print_it "Loading the package $PACKAGE build dependencies ... \c"
   loadit "$BUILD_DEPENDS" > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight  "successful!"

}

patch_it() {

   print_it "Patching the package $PACKAGE source ... \c"
   patchit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

configure_it() {

   print_it "Configuring the package $PACKAGE ... \c"
   configureit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show configure"
        exit 1
   fi
   print_it hilight "successful!"

}

compile_it() {

   print_it "Compiling the package $PACKAGE ... \c"
   compileit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show compile"
        exit 1
   fi
   print_it hilight "successful!"

}

install_it() {

   print_it "Installing the package $PACKAGE ... \c"
   sudo installit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show install"
        exit 1
   fi
   print_it hilight "successful!"

}

split_it() {

   print_it "Splitting the package $PACKAGE extensions ... \c"
   splitit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

strip_it() {

   print_it "Stripping the package $PACKAGE ... \c"
   stripit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

create_it() {

   print_it "Creating the package $PACKAGE extensions ... \c"
   createit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

generate_it() {

   print_it "Generating the package $PACKAGE extension info files ... \c"
   generateit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

check_it() {

   print_it "Checking the package $PACKAGE extensions ... \c"
   checkit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

package_it() {

   print_it "Packaging the package $PACKAGE ... \c"
   packageit > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        exit 1
   fi
   print_it hilight "successful!"

}

compress_it() {

   if [ ! -d "$TCEXTTOOLS_PKG_TEMP/$PACKAGE" ]; then
          print_it error "You must package it first!"
          exit 1
   fi

   print_it "Compressing the package $PACKAGE ... \c"
   compressit bz2 "$TCEXTTOOLS_PKG_TEMP/$PACKAGE" > "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it error "failed!"
        print_it warning "For details: buildit show error"
        rm -f "${PACKAGE}.tar.bz2"
        exit 1
   else
        busybox mv -f "${PACKAGE}.tar.bz2" "$TCEXTTOOLS_PKG_TEMP" >> "$TCEXTTOOLS_MESSAGE_LOG" 2>&1
        if [ "$?" -gt 0 ]; then
             print_it error "failed!"
             print_it warning "For details: buildit show error"
             rm -f "${PACKAGE}.tar.bz2"
             exit 1
        fi
   fi
   print_it hilight "successful!"

}

encrypt_it() {

   if [ ! -e "$PACKAGE_PACKAGE" ]; then
          print_it error "You must compress it first!"
          exit 1
   fi

   encryptit "$PACKAGE_PACKAGE" || exit 1

}

custom_it() {

   build_custom || exit 1

}

build_it() {

   echo -e "${TCEXTTOOLS_MESSAGE_COLOR}Building the package $PACKAGE started at ${TCEXTTOOLS_HILIGHT_COLOR}$TIME${TCEXTTOOLS_MESSAGE_COLOR} on ${TCEXTTOOLS_HILIGHT_COLOR}$DATE${NORMAL}"
   set_date && SECONDS_BEFORE="$SECONDS"
   clean_it || exit 1
   build_rules || exit 1
   set_date && SECONDS_AFTER="$SECONDS"
   echo -e "${TCEXTTOOLS_MESSAGE_COLOR}Building the package $PACKAGE finished at ${TCEXTTOOLS_HILIGHT_COLOR}$TIME${TCEXTTOOLS_MESSAGE_COLOR} on ${TCEXTTOOLS_HILIGHT_COLOR}$DATE${TCEXTTOOLS_MESSAGE_COLOR} in ${TCEXTTOOLS_HILIGHT_COLOR}$(expr $SECONDS_AFTER - $SECONDS_BEFORE)${TCEXTTOOLS_MESSAGE_COLOR} seconds${NORMAL}"
   encrypt_it || exit 1

}

show_it() {

   case "$1" in
        download) 
                 [ -e "$TCEXTTOOLS_DOWNLOAD_LOG" ] && { cat "$TCEXTTOOLS_DOWNLOAD_LOG" ; echo -e "${NORMAL}\c" ; }
                 ;;
        configure)
                 [ -e "$TCEXTTOOLS_CONFIGURE_LOG" ] && { cat "$TCEXTTOOLS_CONFIGURE_LOG" ; echo -e "${NORMAL}\c" ; }
                 ;;
        compile)
                 [ -e "$TCEXTTOOLS_COMPILE_LOG" ] && { cat "$TCEXTTOOLS_COMPILE_LOG" ; echo -e "${NORMAL}\c" ; }
                 ;;
        install)
                 [ -e "$TCEXTTOOLS_INSTALL_LOG" ] && { cat "$TCEXTTOOLS_INSTALL_LOG" ; echo -e "${NORMAL}\c" ; }
                 ;;
        error)
                 [ -e "$TCEXTTOOLS_MESSAGE_LOG" ] && { cat "$TCEXTTOOLS_MESSAGE_LOG" ; echo -e "${NORMAL}\c" ; }
                 [ -e "$TCEXTTOOLS_MESSAGE_LOG_2" ] && { cat "$TCEXTTOOLS_MESSAGE_LOG_2" ; echo -e "${NORMAL}\c" ; }
                 ;;
        *)
                 print_it warning "Usage: buildit show download|configure|compile|install|error"
                 ;;
   esac

}

if [ -z "$1" ]; then
     build_it || exit 1
     exit 0
fi

case "$1" in
	clean|clear)
		  clean_it
		  ;;
	download) 
		  download_it
		  ;;
	convert)
		  convert_it
		  ;;
	unpack)
		  unpack_it
		  ;;
	load)
		  load_it
		  ;;
	patch)
		  patch_it
		  ;;
	configure)
		  configure_it
		  ;;
	compile)
		  compile_it
		  ;;
	install)
		  install_it
		  ;;
	split)
		  split_it
		  ;;
	strip)
		  strip_it
		  ;;
	create)
		  create_it
		  ;;
	check)
		  check_it
		  ;;
	generate)
		  generate_it
		  ;;
	package)
		  package_it
		  ;;
	compress)
		  compress_it
		  ;;
	encrypt)
		  encrypt_it
		  ;;
	show)
		  show_it "$2"
		  ;;
	custom)
		  custom_it
		  ;;
	*)
		  print_usage
		  ;;
esac

exit 0

