#!/bin/sh

############################################################################
#                                                                          #
#                      buildit: Builds the package                         #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Copyright (c) 2011 Sercan Arslan <arslanserc@gmail.com>
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions" ]; then
     . "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

print_usage(){

   echo -e "${TCEXTTOOLS_ERROR_COLOR}${THIS} usage:"
   echo -e "\n\t${TCEXTTOOLS_MESSAGE_COLOR}${THIS} clean|load|download|convert|unpack|patch|configure|compile|install|split|strip|create|check|generate|package|custom|encrypt|print|help${NORMAL}"

   exit 0

}

clean_it() {

   cleanit || exit 1

}

download_it() {

   if [ -f "$PACKAGE_SOURCE_ORIG" -o -f "$PACKAGE_SOURCE_CONV" ]; then
        print_it --warning "The package $PACKAGE source already exists."
        exit 0
   fi

   downloadit || exit 1

}

convert_it() {

   if [ -f "$PACKAGE_SOURCE_CONV" ]; then
        print_it --warning "The package $PACKAGE source converted already exists."
        exit 0
   fi

   convertit || exit 1

}

unpack_it() {

   unpackit || exit 1

}

load_it() {

   loadit || exit 1

}

patch_it() {

   patchit || exit 1

}

configure_it() {

   configureit || exit 1

}

compile_it() {

   compileit || exit 1

}

install_it() {

   sudo installit || exit 1

}

split_it() {

   splitit || exit 1

}

strip_it() {

   stripit || exit 1

}

create_it() {

   createit || exit 1

}

generate_it() {

   generateit || exit 1

}

check_it() {

   checkit || exit 1

}

package_it() {

   packageit || exit 1

}

encrypt_it() {

   encryptit || exit 1

}

custom_function() {

   FUNCTION="$1"

   if [ -z "$FUNCTION" ]; then
        print_it --error "You need to specify the name of the custom function."
        exit 1
   fi

   print_it "Executing the package $PACKAGE custom build function $FUNCTION ... \c"
   build_${FUNCTION} > "$PACKAGE_MESSAGE_LOG" 2>&1
   if [ "$?" -gt 0 ]; then
        print_it --error "failed!"
        print_it --warning "For details: buildit print message"
        exit 1
   fi
   print_it --hilight "successful!"

}

tet_load() {

   buildit load || exit 1

}

tet_download() {

   buildit download || exit 1

}

tet_convert() {

   buildit convert || exit 1

}

tet_unpack() {

   buildit unpack || exit 1

}

tet_patch() {

   buildit patch || exit 1

}

tet_configure() {

   buildit configure || exit 1

}

tet_compile() {

   buildit compile || exit 1

}

tet_install() {

   buildit install || exit 1

}

tet_split() {

   buildit split || exit 

}

tet_strip() {

   buildit strip || exit 1

}

tet_create() {

   buildit create || exit 1

}

tet_generate() {

   buildit generate || exit 1

}

tet_check() {

   buildit check || exit 1

}

tet_package() {

   buildit package || exit 1

}

tet_custom() {

   buildit custom "$1" || exit 1

}

build_it() {

   set_date; SECONDS_BEFORE="$SECONDS"
   echo -e "${TCEXTTOOLS_MESSAGE_COLOR}Building the package $PACKAGE started at ${TCEXTTOOLS_HILIGHT_COLOR}$TIME${TCEXTTOOLS_MESSAGE_COLOR}"
   clean_it
   build_rules
   set_date; SECONDS_AFTER="$SECONDS"; SECONDS_ELAPSED=`expr $SECONDS_AFTER - $SECONDS_BEFORE`
   echo -e "${TCEXTTOOLS_MESSAGE_COLOR}Building the package $PACKAGE finished at ${TCEXTTOOLS_HILIGHT_COLOR}$TIME${TCEXTTOOLS_MESSAGE_COLOR} in ${TCEXTTOOLS_HILIGHT_COLOR}${SECONDS_ELAPSED}${TCEXTTOOLS_MESSAGE_COLOR} seconds${NORMAL}"
   encrypt_it

}

print_function() {

   case "$1" in
       configure)
                if [ -f "$PACKAGE_CONFIGURE_LOG" ]; then
                     cat "$PACKAGE_CONFIGURE_LOG"
                fi
                ;;
       compile)
                if [ -f "$PACKAGE_COMPILE_LOG" ]; then
                     cat "$PACKAGE_COMPILE_LOG"
                fi
                ;;
       install)
                if [ -f "$PACKAGE_INSTALL_LOG" ]; then
                     cat "$PACKAGE_INSTALL_LOG"
                fi
                ;;
       build)
                if [ -f "$PACKAGE_BUILD_LOG" ]; then
                     cat "$PACKAGE_BUILD_LOG"
                     echo -e "${NORMAL}\c"
                fi
                ;;
       message)
                if [ -f "$PACKAGE_MESSAGE_LOG" ]; then
                     cat "$PACKAGE_MESSAGE_LOG"
                     echo -e "${NORMAL}\c"
                fi
                ;;
       *)
                print_it --warning "Usage: buildit print configure|compile|install|build|message"
                ;;
   esac

}

if [ -z "$1" ]; then
     if build_it | tee "$PACKAGE_BUILD_LOG"; then
        exit 0
     else
        exit 1
     fi
fi

case "$1" in
	clean)
		  clean_it
		  ;;
	download)
		  download_it
		  ;;
	convert)
		  convert_it
		  ;;
	unpack)
		  unpack_it
		  ;;
	load)
		  load_it
		  ;;
	patch)
		  patch_it
		  ;;
	configure)
		  configure_it
		  ;;
	compile)
		  compile_it
		  ;;
	install)
		  install_it
		  ;;
	split)
		  split_it
		  ;;
	strip)
		  strip_it
		  ;;
	create)
		  create_it
		  ;;
	check)
		  check_it
		  ;;
	generate)
		  generate_it
		  ;;
	package)
		  package_it
		  ;;
	encrypt)
		  encrypt_it
		  ;;
	print)
		  print_function "$2"
		  ;;
	custom)
		  custom_function "$2"
		  ;;
	*)
		  print_usage
		  ;;
esac

exit 0

