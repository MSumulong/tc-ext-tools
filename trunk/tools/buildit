#!/bin/sh
#
#  buildit: Builds the package
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  (C) Copyright 2010 Sercan Arslan
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions" ]; then
     . "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

print_usage(){
  echo -e "${TCEXTTOOLS_ERROR_COLOR}Usage:${TCEXTTOOLS_MESSAGE_COLOR}\n$(basename $0) (clean|clear)|load|download|convert|unpack|patch|configure|compile|install|strip|split|create|check|generate|package|compress|encrypt|(cat|show)|help|all${NORMAL}"
}

clean_it() {

  cd "$PACKAGE_ROOT"

  print_it "Cleaning the package $PACKAGE ... \c"

  RETURN_CODE=0

  if [ -d "$TCEXTTOOLS_BIN" ]; then
       sudo rm -rf "$TCEXTTOOLS_BIN" > /dev/null 2>&1 || RETURN_CODE=1
  fi

  mkdir -p "$TCEXTTOOLS_BIN" > /dev/null 2>&1 || RETURN_CODE=1

  if [ -d "$TCEXTTOOLS_PKG" ]; then
       sudo rm -rf "$TCEXTTOOLS_PKG" > /dev/null 2>&1 || RETURN_CODE=1
  fi

  mkdir -p "$TCEXTTOOLS_PKG" > /dev/null 2>&1 || RETURN_CODE=1

  if [ -d "$TCEXTTOOLS_BIN_TEMP" ]; then
       sudo rm -rf "$TCEXTTOOLS_BIN_TEMP" > /dev/null 2>&1 || RETURN_CODE=1
  fi

  mkdir -p "$TCEXTTOOLS_BIN_TEMP" > /dev/null 2>&1 || RETURN_CODE=1

  if [ -d "$TCEXTTOOLS_SRC_TEMP" ]; then
       sudo rm -rf "$TCEXTTOOLS_SRC_TEMP" > /dev/null 2>&1 || RETURN_CODE=1
  fi

  mkdir -p "$TCEXTTOOLS_SRC_TEMP" > /dev/null 2>&1 || RETURN_CODE=1

  if [ -d "$TCEXTTOOLS_LOG" ]; then
       sudo rm -rf "$TCEXTTOOLS_LOG" > /dev/null 2>&1 || RETURN_CODE=1
  fi

  mkdir -p "$TCEXTTOOLS_LOG" > /dev/null 2>&1 || RETURN_CODE=1

  if [ "$RETURN_CODE" -gt 0 ]; then
       print_it error "failed!"
       exit 1
  fi
  print_it hilight "successful!"
}

download_it() {

  cd "$PACKAGE_ROOT"

  if [ -f "$TCEXTTOOLS_SRC/$SOURCE" ]; then
       print_it warning "The package $PACKAGE source is already downloaded."
       exit 0
  fi

  print_it "Downloading the package $PACKAGE source ... \c"
  downloadit > "$TCEXTTOOLS_ERROR_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"
}

convert_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -e "$TCEXTTOOLS_SRC/$SOURCE" ]; then
       print_it error "You must download it first!"
       exit 1
  fi

  print_it "Converting the package $PACKAGE source to xz compressed tarball ... \c"
  convertit > "$TCEXTTOOLS_ERROR_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"
}

unpack_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -e "$TCEXTTOOLS_SRC/$SOURCE" ]; then
        print_it error "You must download it first!"
        exit 1
  fi

  print_it "Unpacking the package $PACKAGE source ... \c"
  unpackit > "$TCEXTTOOLS_ERROR_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"
}

load_it() {

  cd "$PACKAGE_ROOT"

  print_it "Loading the package $PACKAGE build dependencies ... \c"
  if [ -n "$BUILD_DEPENDS" ]; then
       loadit "$BUILD_DEPENDS" > "$TCEXTTOOLS_ERROR_LOG" 2>&1
  fi

  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
       exit 1
  fi
  print_it hilight  "successful!"
}

patch_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -d "$TCEXTTOOLS_BIN_TEMP/$TOP_SRC" ]; then
       print_it error "You must unpack it first!"
       exit 1
  fi

  if [ -d "$PACKAGE_PATCHES" ]; then
       print_it "Patching the package $PACKAGE source ... \c"
       patchit > "$TCEXTTOOLS_ERROR_LOG" 2>&1
       if [ "$?" -gt 0 ]; then
            print_it error "failed!"
            print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
            exit 1
       fi
       print_it hilight "successful!"
  else
       print_it warning "There is no patch for the package $PACKAGE."
  fi
}

configure_it() {

  cd "$PACKAGE_ROOT"

  if [ -e "$TCEXTTOOLS_BUILD" ]; then
       . "$TCEXTTOOLS_BUILD"
  else
       print_it error "tc-ext-tools build functions file not found: $TCEXTTOOLS_BUILD"
       exit 1
  fi

  if [ ! -d "$TCEXTTOOLS_BIN_TEMP/$TOP_SRC" ]; then
       print_it error "You must unpack it first!"
       exit 1
  fi

  print_it "Configuring the package $PACKAGE ... \c"
  cd "$TCEXTTOOLS_BIN_TEMP/$TOP_SRC"
  build_configure > "$TCEXTTOOLS_CONFIGURE_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See $TCEXTTOOLS_CONFIGURE_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"
}

compile_it() {

  cd "$PACKAGE_ROOT"

  if [ -e "$TCEXTTOOLS_BUILD" ]; then
       . "$TCEXTTOOLS_BUILD"
  else
       print_it error "tc-ext-tools build functions file not found: $TCEXTTOOLS_BUILD"
       exit 1
  fi

  if [ ! -d "$TCEXTTOOLS_BIN_TEMP/$TOP_SRC" ]; then
       print_it error "You must configure it first!"
       exit 1
  fi

  print_it "Compiling the package $PACKAGE ... \c"
  cd "$TCEXTTOOLS_BIN_TEMP/$TOP_SRC"
  build_compile > "$TCEXTTOOLS_COMPILE_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See $TCEXTTOOLS_COMPILE_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"
}

install_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -d "$TOP_SRC_DIR" ]; then
       print_it error "You must compile it first!"
       exit 1
  fi

  print_it "Installing the package $PACKAGE ... \c"
  sudo installit > "$TCEXTTOOLS_INSTALL_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See $TCEXTTOOLS_INSTALL_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"

}

modify_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -d "$TCEXTTOOLS_INSTALL_ROOT" ]; then
       print_it error "You must install it first!"
       exit 1
  fi

  print_it "Modifying the package $PACKAGE ... \c"
  modifyit > "$TCEXTTOOLS_ERROR_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"

}

strip_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -d "$TCEXTTOOLS_INSTALL_ROOT" ]; then
       print_it error "You must install it first!"
       exit 1
  fi

  print_it "Stripping the package $PACKAGE ... \c"
  stripit "$TCEXTTOOLS_INSTALL_ROOT" > "$TCEXTTOOLS_ERROR_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"
}

split_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -d "$TCEXTTOOLS_INSTALL_ROOT" ]; then
       print_it error "You must install it first!"
       exit 1
  fi

  for EXTENSION in $EXTENSIONS
  do
      print_it "Splitting the extension $EXTENSION out of the package $PACKAGE ... \c"
      splitit "$EXTENSION" > "$TCEXTTOOLS_ERROR_LOG" 2>&1
      if [ "$?" -gt 0 ]; then
           print_it error "failed!"
           print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
           exit 1
      fi
      print_it hilight "successful!"
  done
}

create_it() {

  cd "$PACKAGE_ROOT"

  [ -d "$TCEXTTOOLS_EXTENSIONS" ] && sudo rm -rf "$TCEXTTOOLS_EXTENSIONS" > /dev/null 2>&1
  mkdir -p "$TCEXTTOOLS_EXTENSIONS" > /dev/null 2>&1

  for EXTENSION in $EXTENSIONS
  do
      if [ ! -d "$TCEXTTOOLS_BIN/$EXTENSION" ]; then
           print_it error "You must split it first!"
           exit 1
      fi

      print_it "Creating the extension $EXTENSION ... \c"
      createit "$EXTENSION" > "$TCEXTTOOLS_ERROR_LOG" 2>&1
      if [ "$?" -gt 0 ]; then
           print_it error "failed!"
           print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
           exit 1
      fi
      print_it hilight "successful!"
  done
}

generate_it() {

  cd "$PACKAGE_ROOT"

  for EXTENSION in $EXTENSIONS
  do
      if [ ! -e "$TCEXTTOOLS_EXTENSIONS/$EXTENSION/${EXTENSION}.tcz" ]; then
           print_it error "You must create it first!"
           exit 1
      fi

      print_it "Generating the extension $EXTENSION info ... \c"
      generateit "$EXTENSION" > "$TCEXTTOOLS_ERROR_LOG" 2>&1
      if [ "$?" -gt 0 ]; then
           print_it error "failed!"
           print_it warning "See $TCEXTTOOLS_ERROR_LOG for details."
           exit 1
      fi
      print_it hilight "successful!"
  done
}

check_it() {

  cd "$PACKAGE_ROOT"

  for EXTENSION in $EXTENSIONS
  do
      if [ ! -e "$TCEXTTOOLS_EXTENSIONS/$EXTENSION/${EXTENSION}.tcz" ]; then
           print_it error "You must create it first!"
           exit 1
      fi

      print_it "Checking the extension $EXTENSION ... \c"
      checkit "$EXTENSION" > "$TCEXTTOOLS_ERROR_LOG" 2>&1
      if [ "$?" -gt 0 ]; then
           print_it error "failed!"
           print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
           exit 1
      fi
      print_it hilight "successful!"
  done
}

package_it() {

  cd "$PACKAGE_ROOT"

  [ -d "$TCEXTTOOLS_PKG" ] && sudo rm -rf "$TCEXTTOOLS_PKG" > /dev/null 2>&1
  mkdir -p "$TCEXTTOOLS_PKG" > /dev/null 2>&1

  print_it "Packaging the package $PACKAGE ... \c"
  packageit > "$TCEXTTOOLS_ERROR_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"
}

compress_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -d "$TCEXTTOOLS_PKG" ]; then
       print_it error "You must package it first!"
       exit 1
  fi

  print_it "Compressing the package $PACKAGE ... \c"
  compressit bz2 "$TCEXTTOOLS_PKG" > "$TCEXTTOOLS_ERROR_LOG" 2>&1
  if [ "$?" -gt 0 ]; then
       print_it error "failed!"
       print_it warning "See error logs in $TCEXTTOOLS_LOG for details."
       exit 1
  fi
  print_it hilight "successful!"
}

encrypt_it() {

  cd "$PACKAGE_ROOT"

  if [ ! -e "${PACKAGE}.tar.bz2" ]; then
       print_it error "You must compress it first!"
       exit 1
  fi

  [ -e "${PACKAGE}.tar.bz2.bfe" ] && sudo rm -f "${PACKAGE}.tar.bz2.bfe"
  encryptit "${PACKAGE}.tar.bz2" || exit 1
}

build_it() {

  cd "$PACKAGE_ROOT"

  if [ -e "$TCEXTTOOLS_BUILD" ]; then
       . "$TCEXTTOOLS_BUILD"
  else
       print_it error "tc-ext-tools build functions file not found: $TCEXTTOOLS_BUILD"
       exit 1
  fi

  build_rules || exit 1
}

show_it() {
  cd "$PACKAGE_ROOT"

  case "$1" in
       download) 
                 [ -e "$TCEXTTOOLS_DOWNLOAD_LOG" ] && cat "$TCEXTTOOLS_DOWNLOAD_LOG"
                 ;;
       configure)
                 [ -e "$TCEXTTOOLS_CONFIGURE_LOG" ] && cat "$TCEXTTOOLS_CONFIGURE_LOG"
                 ;;
       compile)
                 [ -e "$TCEXTTOOLS_COMPILE_LOG" ] && cat "$TCEXTTOOLS_COMPILE_LOG"
                 ;;
       install)
                 [ -e "$TCEXTTOOLS_INSTALL_LOG" ] && cat "$TCEXTTOOLS_INSTALL_LOG"
                 ;;
       error)
                 [ -e "$TCEXTTOOLS_ERROR_LOG" ] && cat "$TCEXTTOOLS_ERROR_LOG"
                 [ -e "$TCEXTTOOLS_ERROR_LOG_2" ] && cat "$TCEXTTOOLS_ERROR_LOG_2"
                 ;;
       *)
                 print_it warning "Usage: buildit show download|configure|compile|install|error"
                 ;;
  esac
}

if [ -z "$1" ]; then
     "$0" all
     exit 0
fi

case "$1" in
	clean|clear)
		  clean_it
		  ;;
	download) 
		  download_it
		  ;;
	convert)
		  convert_it
		  ;;
	unpack)
		  unpack_it
		  ;;
	load)
		  load_it
		  ;;
	patch)
		  patch_it
		  ;;
	configure)
		  configure_it
		  ;;
	compile)
		  compile_it
		  ;;
	install)
		  install_it
		  ;;
	strip)
		  strip_it
		  ;;
	split)
		  split_it
		  ;;
	create)
		  create_it
		  ;;
	check)
		  check_it
		  ;;
	generate)
		  generate_it
		  ;;
	package)
		  package_it
		  ;;
	compress)
		  compress_it
		  ;;
	encrypt)
		  encrypt_it
		  ;;
	show)
		  show_it "$2"
		  ;;
	all)
		  clean_it
		  build_it
		  ;;
	help|*)
		  print_usage
		  ;;
esac

exit 0

