#!/bin/sh

############################################################################
#                                                                          #
#         generateit: Generates the package extensions' info files         #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  (C) Copyright 2011 Sercan Arslan
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/init.d/tc-ext-tools.sh" ]; then
     . "$TCEXTTOOLS_ROOT/etc/init.d/tc-ext-tools.sh"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

this_generate() {

   echo ""
   echo "Setting the extension description."
   [ ! "${EXTENSION%-bin}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, utilities."
   [ ! "${EXTENSION%-lib}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, shared libraries."
   [ ! "${EXTENSION%-dev}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, development files."
   [ ! "${EXTENSION%-dbg}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, debugging symbols."
   [ ! "${EXTENSION%-doc}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, documentation files."
   [ ! "${EXTENSION%-locale}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, locale files."
   [ ! "${EXTENSION%-gir}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, gobject introspection data."

   echo ""
   echo "DESCRIPTION = $DESCRIPTION"

   echo ""
   echo "Checking if the extension has a common file ..."
   if [ -f "$TCEXTTOOLS_EXTENSION_COMMON" ]; then
        echo "Yes it has, sourcing it."
        . "$TCEXTTOOLS_EXTENSION_COMMON"
   else
        echo "No it does not have."
   fi

   echo ""
   echo "Setting other extension info parameters ..."

   CURRENT="$DATE $CURRENT"
   echo ""
   echo "CURRENT = $CURRENT"

   SIZE=$(du -h "$TCEXTTOOLS_EXTENSION_TCZ" | cut -f1)
   echo ""
   echo "SIZE = $SIZE"

   echo ""
   echo "Writing to the extension info ..."
   cat > "$TCEXTTOOLS_EXTENSION_INFO" << _EOF
Title:		${EXTENSION_NAME}.tcz
Description:	${DESCRIPTION}
Version:	${VERSION}
Author:		${AUTHOR}
Original-site:	${SITE}
Copying-policy:	${COPYING}
Size:		${SIZE}
Extension_by:	${MAINTAINERS}
Comments:	${COMMENTS}
Change-log:	${CHANGELOG}
Current:	${CURRENT}
_EOF

   if [ "$?" -gt 0 ]; then
        echo "Error! Writing to the extension info file failed."
        return 1
   fi

   return 0

}

this_main() {

   echo ""
   echo "Starting the process of generating the package $PACKAGE extension info files."

   for EXTENSION in $EXTENSIONS
   do
       echo ""
       echo "Setting the extension $EXTENSION parameters."
       set_extension || return 1

       if [ ! -f "$TCEXTTOOLS_EXTENSION_TCZ" ]; then
              echo ""
              echo "Error! You must create the package extensions first."
              exit 1
       fi

       echo ""
       echo "Generating the extension $EXTENSION_NAME info file ..."
       this_generate
       if [ "$?" -gt 0 ]; then
            echo ""
            echo "Error! Generating the extension $EXTENSION_NAME info failed."
            return 1
       else
            echo ""
            echo "Generating the extension $EXTENSION_NAME info successful!"
       fi
   done

   echo ""
   echo "Generated the package $PACKAGE extension info files successfully."

   return 0

}

print_it "Generating the package $PACKAGE extension info files ... \c"
this_main > "$TCEXTTOOLS_MESSAGE_LOG_2" 2>&1
if [ "$?" -gt 0 ]; then
     print_it error "failed!"
     exit 1
fi
print_it hilight "successful!"

exit 0

