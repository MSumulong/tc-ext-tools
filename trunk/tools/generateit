#!/bin/sh
#
#  generateit: Generates extension info file
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  (C) Copyright 2010 Sercan Arslan
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions" ]; then
     . "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

this_generate() {

  [ ! "${EXTENSION%-bin}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, utilities."
  [ ! "${EXTENSION%-lib}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, shared libraries."
  [ ! "${EXTENSION%-dev}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, development files."
  [ ! "${EXTENSION%-dbg}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, debugging symbols."
  [ ! "${EXTENSION%-doc}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, documentation files."
  [ ! "${EXTENSION%-locale}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, locale files."
  [ ! "${EXTENSION%-gir}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, gobject introspection data."

  if [ -e "$PACKAGE_EXTENSIONS/$EXTENSION/info" ]; then
      . "$PACKAGE_EXTENSIONS/$EXTENSION/info"
  fi

  CURRENT="$DATE $CURRENT"
  SIZE=$(du -h "$TCEXTTOOLS_EXTENSIONS/$EXTENSION/${EXTENSION}.tcz" | cut -f1)

  cat > "$TCEXTTOOLS_EXTENSIONS/$EXTENSION/${EXTENSION}.tcz.info" << _EOF
Title:		${EXTENSION}.tcz
Description:	${DESCRIPTION}
Version:	${VERSION}
Author:		${AUTHOR}
Original-site:	${SITE}
Copying-policy:	${COPYING}
Size:		${SIZE}
Extension_by:	${MAINTAINERS}
Comments:	${COMMENTS}
Change-log:	${CHANGELOG}
Current:	${CURRENT}
_EOF

  if [ "$?" -gt 0 ]; then
       print_it error "Failed to write ${EXTENSION}.tcz.info"
       return 1
  fi

  return 0
}

this_main() {

  for EXTENSION in $EXTENSIONS
  do
      . "$PACKAGE_COMMON"

      if [ ! -e "$TCEXTTOOLS_EXTENSIONS/$EXTENSION/${EXTENSION}.tcz" ]; then
             print_it error "You must create it first!"
             exit 1
      fi

      this_generate
      if [ "$?" -gt 0 ]; then
           print_it error "Generating the extension $EXTENSION info failed!"
           return 1
      else
           print_it "Generating the extension $EXTENSION info successful!"
      fi
  done  

  return 0
}

print_it "Generating the package $PACKAGE extensions info files ... \c"
this_main > "$TCEXTTOOLS_ERROR_LOG_2" 2>&1
if [ "$?" -gt 0 ]; then
     print_it error "failed!"
     exit 1
fi
print_it hilight "successful!"

exit 0

