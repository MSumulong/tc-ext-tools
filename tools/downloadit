#!/bin/sh

############################################################################
#                                                                          #
#                downloadit: Downloads the package source                  #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Copyright (c) 2011 Sercan Arslan <arslanserc@gmail.com>
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/init.d/tc-ext-tools.sh" ]; then
     . "$TCEXTTOOLS_ROOT/etc/init.d/tc-ext-tools.sh"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

this_main() {

   echo "---------------------------------------------------------------"
   echo ""
   echo "Downloading the package $PACKAGE source ..."
   echo ""
   echo "---------------------------------------------------------------"

   echo "Cleaning the package source directory."
   [ -d "$_PACKAGE_SRC" ] && sudo rm -rf "$_PACKAGE_SRC"
   mkdir -p "$_PACKAGE_SRC" || return 1

   if [ "$PACKAGE_SOURCE_URL_TYPE" = "svn" ] || [ "$PACKAGE_SOURCE_URL_TYPE" = "git" ]; then
        echo "Cleaning the package src temporary directory."
        [ -d "$PACKAGE_SRC_TEMP" ] && sudo rm -rf "$PACKAGE_SRC_TEMP"
        mkdir -p "$PACKAGE_SRC_TEMP"

        cd "$PACKAGE_SRC_TEMP"

        if [ "$PACKAGE_SOURCE_URL_TYPE" = "svn" ]; then
             echo "Checking out the svn repository $SOURCE"
             svn --non-interactive --trust-server-cert co "$SOURCE" "$PACKAGE_SOURCE_TOPDIR" || return 1

             echo "Creating a tarball from the source."
             tar --exclude-vcs -cvJf "$PACKAGE_SOURCE_NAME" "$SOURCE_TOPDIR" || return 1

             echo "Moving the tarball to the package source directory."
             mv -f "$PACKAGE_SOURCE_NAME" "$_PACKAGE_SRC" || return 1
        elif [ "$PACKAGE_SOURCE_URL_TYPE" = "git" ]; then
             echo "Cloning the git repository $SOURCE"
             git clone "$SOURCE" "$PACKAGE_SOURCE_TOPDIR" || return 1

             echo "Creating a tarball from the source."
             tar --exclude-vcs -cvJf "$PACKAGE_SOURCE_NAME" "$SOURCE_TOPDIR" || return 1

             echo "Moving the tarball to the package source directory."
             mv -f "$PACKAGE_SOURCE_NAME" "$_PACKAGE_SRC" || return 1
        fi
   elif [ "$PACKAGE_SOURCE_URL_TYPE" = "generic" ]; then
        echo "Downloading the package source $PACKAGE_SOURCE_NAME from $SOURCE"
        wget --no-check-certificate "$SOURCE" -O "$PACKAGE_SOURCE" || return 1
   elif [ "$PACKAGE_SOURCE_URL_TYPE" = "custom" ]; then
        echo "Executing the package build download function."
        cd $_PACKAGE_SRC
        build_download || return 1
   fi

   echo "---------------------------------------------------------------"
   echo ""
   echo "Downloaded the package $PACKAGE source successfully."
   echo ""
   echo "---------------------------------------------------------------"

   return 0

}

print_it "Downloading the package $PACKAGE source ... \c"
this_main > "$PACKAGE_MESSAGE_LOG_2" 2>&1
if [ "$?" -gt 0 ]; then
     print_it error "failed!"
     exit 1
fi
print_it hilight "successful!"

exit 0

