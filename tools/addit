#!/bin/sh

############################################################################
#                                                                          #
#               addit: Adds a new package for the first time               #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Copyright (c) 2011 Sercan Arslan <arslanserc@gmail.com>
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/config" ]; then
     . "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/config"
else
     echo "${RED}${THIS}: default configuration file not found!${NORMAL}"
     exit 1
fi

if [ -f "$HOME/.config/tc-ext-tools.conf" ]; then
     . "$HOME/.config/tc-ext-tools.conf"
else
    echo "${RED}${THIS}: user configuration file not found!${NORMAL}"
    exit 1
fi

print_usage(){

   cat << EOF
${RED}${THIS} usage:${NORMAL}

      ${GREEN}${THIS} <package> <version> <extensions> 
${BLUE}
      where;
             <package> is the package name.
             <version> is the version in numbers, svn, git, or any type of vcs system supported.
             <extensions> is the set of extensions. If it is not given, it is set to the package name.
${NORMAL}
EOF

}

if [ "$#" -lt 2 -o "$#" -gt 3 ]; then
   print_usage
   exit 1
else
   PACKAGE="$1"
   VERSION="$2"
fi

if [ "$#" -lt 3 ]; then
   EXTENSIONS="$PACKAGE"
else
   EXTENSIONS="$3"
fi

if [ -f "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions" ]; then
     [ -d "$TCEXTTOOLS_PACKAGES/$PACKAGE" ] || mkdir -p "$TCEXTTOOLS_PACKAGES/$PACKAGE"
     cd "$TCEXTTOOLS_PACKAGES/$PACKAGE"

     . "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

echo -e "${MESSAGE_COLOR}Adding the package with:"
echo -e "\n\t${MESSAGE_COLOR}PACKAGE = ${WARNING_COLOR}$PACKAGE"
echo -e "\t${MESSAGE_COLOR}VERSION = ${WARNING_COLOR}$VERSION"
echo -e "\t${MESSAGE_COLOR}EXTENSIONS = ${WARNING_COLOR}$EXTENSIONS"
echo -e "${NORMAL}"

if [ -f "$PACKAGE_COMMON" ]; then
   echo "${ERROR_COLOR}This package already exists.${NORMAL}"
   echo "${WARNING_COLOR}If you continue, existing files will be overwritten.${NORMAL}"
   echo "${MESSAGE_COLOR}Would you like you continue ? ${HILIGHT_COLOR}[y|yes or n|no]${NORMAL}"
   read ans
   case "$ans" in
        y|yes)
          echo "${MESSAGE_COLOR}You agreed to continue, the files will be overwritten.${NORMAL}"
          ;;
        n|no)
          echo "${MESSAGE_COLOR}You don't want to continue ? Farewell!${NORMAL}"
          exit 0
          ;;
        *)
          echo "${ERROR_COLOR}I don't understand what you are saying!${NORMAL}"
          exit 1
          ;;
   esac
fi

this_main() {

   echo "---------------------------------------------------------------"
   echo ""
   echo "Creating the package $PACKAGE files ..."
   echo ""
   echo "---------------------------------------------------------------"

   echo "Cleaning the package extensions directory."
   [ -d "$PACKAGE_EXTENSIONS" ] && rm -rf "$PACKAGE_EXTENSIONS"
   mkdir -p "$PACKAGE_EXTENSIONS" || return 1

   echo "Creating the package common file."
   if [ "$VERSION" = "svn" ]; then

        cat > "$PACKAGE_COMMON" << _EOF
PACKAGE="$PACKAGE"
VERSION="svn"
SOURCE="svn::"
BUILD_DEPENDS=""

DESCRIPTION="A brief description of package."
AUTHOR="authors of package"
SITE="http://www.package.com"
COPYING="GPL-2"
MAINTAINERS="$PACKAGE_MAINTAINER"
COMMENTS="This extension is PPI compatible."
CHANGELOG="---"
CURRENT="First Version"
_EOF

        [ "$?" -gt 0 ] && return 1

   elif [ "$VERSION" = "git" ]; then

        cat > "$PACKAGE_COMMON" << _EOF
PACKAGE="${PACKAGE}"
VERSION="git"
SOURCE="git::"
BUILD_DEPENDS=""

DESCRIPTION="A brief description of package."
AUTHOR="authors of package"
SITE="http://www.package.com"
COPYING="GPL-2"
MAINTAINERS="$PACKAGE_MAINTAINER"
COMMENTS="This extension is PPI compatible."
CHANGELOG="---"
CURRENT="First Version"
_EOF

        [ "$?" -gt 0 ] && return 1

   else

        cat > "$PACKAGE_COMMON" << _EOF
PACKAGE="$PACKAGE"
VERSION="$VERSION"
SOURCE=""
BUILD_DEPENDS=""

DESCRIPTION="A brief description of package."
AUTHOR="authors of package"
SITE="http://www.package.com"
COPYING="GPL-2"
MAINTAINERS="$PACKAGE_MAINTAINER"
COMMENTS="This extension is PPI compatible."
CHANGELOG="---"
CURRENT="First Version"
_EOF

        [ "$?" -gt 0 ] && return 1

   fi

   echo "Installing the package build file."
   install -m 644 "$TCEXTTOOLS_ROOT/share/tc-ext-tools/build" "$PACKAGE_BUILD" || return 1

   echo "Creating the package extensions install and dep files."
   for EXTENSION in $EXTENSIONS
   do
       mkdir -p "$PACKAGE_EXTENSIONS/$EXTENSION" || return 1

       touch "$PACKAGE_EXTENSIONS/$EXTENSION/install" || return 1

       if [ "${EXTENSION%-doc}" = "$EXTENSION" ]; then
            touch "$PACKAGE_EXTENSIONS/$EXTENSION/dep" || return 1
       fi

       if [ "${EXTENSION%-locale}" != "$EXTENSION" ]; then
          echo "${EXTENSION%-locale}.tcz" > "$PACKAGE_EXTENSIONS/$EXTENSION/dep" || return 1
          echo "usr/local/share/locale" > "$PACKAGE_EXTENSIONS/$EXTENSION/install" || return 1
       elif [ -n "$(echo $EXTENSIONS | grep ${EXTENSION}-locale)" ]; then
          echo "usr/local" > "$PACKAGE_EXTENSIONS/$EXTENSION/install" || return 1
          echo "x-usr/local/share/locale" >> "$PACKAGE_EXTENSIONS/$EXTENSION/install" || return 1
       elif [ "${EXTENSION%-dev}" != "$EXTENSION" ]; then
          echo "${EXTENSION%-dev}.tcz" > "$PACKAGE_EXTENSIONS/$EXTENSION/dep" || return 1
       fi
   done

   echo "---------------------------------------------------------------"
   echo ""
   echo "Created the package $PACKAGE files successfully."
   echo ""
   echo "---------------------------------------------------------------"

   return 0

}

echo -e "${MESSAGE_COLOR}Adding the package ${HILIGHT_COLOR}$PACKAGE${MESSAGE_COLOR} ... ${NORMAL}\c"
this_main > /tmp/addit.log 2>&1
if [ "$?" -gt 0 ]; then
     echo "${ERROR_COLOR}failed!${NORMAL}"
     echo "${WARNING_COLOR}See /tmp/addit.log for details.${NORMAL}"
     exit 1
fi
echo "${HILIGHT_COLOR}successful!${NORMAL}"

echo "${WARNING_COLOR}Please don't forget to run ${WARNING_COLOR_H}update-tet-database${WARNING_COLOR} at least once after adding a new package.${NORMAL}"

exit 0

