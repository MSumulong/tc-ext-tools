#!/bin/sh

############################################################################
#                                                                          #
#                   patchit: Patches the package source                    #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  (C) Copyright 2011 Sercan Arslan
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/init.d/tc-ext-tools.sh" ]; then
     . "$TCEXTTOOLS_ROOT/etc/init.d/tc-ext-tools.sh"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

if [ -z "$TCEXTTOOLS_SOURCE_TOPDIR" ]; then
     print_it error "You must unpack it first!"
     exit 1
fi

this_main() {

   echo ""
   echo "Patching the package $PACKAGE ..."

   echo ""
   echo "Checking for the package $PACKAGE patches ..."
   if [ -f "$TCEXTTOOLS_PATCHES/series" ]; then
        echo "Using the series file to detect the package patches."
        PATCHES=$(cat "$TCEXTTOOLS_PATCHES/series")
   elif [ -d "$TCEXTTOOLS_PATCHES" ]; then
        echo "No series file, getting the list of patches from the package patches directory contents."
        PATCHES=$(ls "$TCEXTTOOLS_PATCHES")
   fi

   if [ -n "$PATCHES" ]; then
        echo ""
        echo "Patches detected. Printing detected patches ..."
        echo "PATCHES = $PATCHES"

        echo ""
        echo "Processing patches ..."
        for PATCH in $PATCHES
        do
           echo "PATCH = $PATCH"
           if [ -d "$TCEXTTOOLS_PATCHES/$PATCH" ]; then
                echo "Skipping the patch $PATCH. It is a directory not a patch!"
                continue
           fi

           echo ""
           echo "Detecting the patch level ..."
           for i in $(cat $TCEXTTOOLS_PATCHES/$PATCH | grep "\-\-\-" | cut -f2 -d" " | cut -f1 -d" ")
           do
               PATCH_LEVEL=""
               if [ -f "$TCEXTTOOLS_SOURCE_TOPDIR/$i" ]; then
                    PATCH_LEVEL=0
               else
                    PATCH_LEVEL=1
               fi
               break
           done

           if [ -z "$PATCH_LEVEL" ]; then
                echo ""
                echo "Error! patch level for $PATCH can not be detected."
                return 1
           fi

           if [ ! -f "$TCEXTTOOLS_PATCHES/$PATCH" ]; then
                echo ""
                echo "Error! The patch $PATCH is not a regular file."
                return 1
           fi

           echo ""
           echo "Applying the patch $PATCH with patch level $PATCH_LEVEL ..."
           patch --directory="$TCEXTTOOLS_SOURCE_TOPDIR" -Np$PATCH_LEVEL -i "$TCEXTTOOLS_PATCHES/$PATCH" || return 1
        done
   else
        echo "No patch found. Skipping."
        return 0
   fi

   echo ""
   echo "Patching the package completed successfully."

   return 0

}

print_it "Patching the package $PACKAGE source ... \c"
this_main > "$TCEXTTOOLS_MESSAGE_LOG_2" 2>&1
if [ "$?" -gt 0 ]; then
     print_it error "failed!"
     exit 1
fi
print_it hilight "successful!"

exit 0

