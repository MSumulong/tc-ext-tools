#!/bin/sh

############################################################################
#                                                                          #
#         generateit: Generates the package extensions' info files         #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Copyright (c) 2011 Sercan Arslan <arslanserc@gmail.com>
#

. /etc/init.d/tc-functions

TET_ROOT="$(dirname $0)/.."

if [ -f "$TET_ROOT/share/tet/functions.sh" ]; then
     . "$TET_ROOT/share/tet/functions.sh"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

if [ -n "$HAVE_TET_CREATE" -a ! -f "$PACKAGE_CREATE_STAMP" ]; then
     echo "${ERROR_COLOR}You must create it first!${NORMAL}"
     exit 1
fi

this_generate() {

   echo "Setting the extension description."
   [ ! "${EXTENSION%-bin}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, utilities."
   [ ! "${EXTENSION%-lib}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, shared libraries."
   [ ! "${EXTENSION%-dev}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, development files."
   [ ! "${EXTENSION%-dbg}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, debugging symbols."
   [ ! "${EXTENSION%-doc}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, documentation files."
   [ ! "${EXTENSION%-locale}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, locale files."
   [ ! "${EXTENSION%-gir}" = "$EXTENSION" ] && DESCRIPTION="${DESCRIPTION%.}, gobject introspection data."

   echo -e "Checking if the extension has a common file ... \c"
   if [ -f "$PACKAGE_EXTENSION_COMMON" ]; then
        echo "yes"
        echo "Sourcing the extension common."
        . "$PACKAGE_EXTENSION_COMMON"
   else
        echo "no"
   fi

   echo "Setting some other extension info variables."
   CURRENT="$DATE $CURRENT"
   SIZE=$(du -h "$PACKAGE_EXTENSION_TCZ" | cut -f1)

   echo "Writing to the extension info."
   cat > "$PACKAGE_EXTENSION_INFO" << _EOF
Title:		${PACKAGE_EXTENSION_NAME}.tcz
Description:	${DESCRIPTION}
Version:	${VERSION}
Author:		${AUTHOR}
Original-site:	${SITE}
Copying-policy:	${COPYING}
Size:		${SIZE}
Extension_by:	${MAINTAINERS}
Comments:	${COMMENTS}
Change-log:	${CHANGELOG}
Current:	${CURRENT}
_EOF

   if [ "$?" -gt 0 ]; then
        echo "Error! Generating the extension info file failed."
        return 1
   fi

   return 0

}

this_main() {

   echo "---------------------------------------------------------------"
   echo ""
   echo "Generating the package $PACKAGE extension info files ..."
   echo ""
   echo "---------------------------------------------------------------"

   for EXTENSION in $EXTENSIONS
   do
       set_extension

       echo "---------------------------------------------------------------"
       echo "Generating the extension $PACKAGE_EXTENSION_NAME info file."
       echo "---------------------------------------------------------------"

       echo -e "Checking if the extension is created before ... \c"
       if [ -f "$PACKAGE_EXTENSION_TCZ" ]; then
            echo "yes"
       else
            echo "no"
            echo "---------------------------------------------------------------"
            echo "Error! You must create it first."
            echo "---------------------------------------------------------------"
            return 1
       fi

       this_generate
       if [ "$?" -gt 0 ]; then
            echo "---------------------------------------------------------------"
            echo "Error! Generating the extension $PACKAGE_EXTENSION_NAME info failed."
            echo "---------------------------------------------------------------"
            return 1
       else
            echo "---------------------------------------------------------------"
            echo "Generating the extension $PACKAGE_EXTENSION_NAME info successful!"
            echo "---------------------------------------------------------------"
       fi
   done

   echo "---------------------------------------------------------------"
   echo ""
   echo "Generated the package $PACKAGE extension info files successfully."
   echo ""
   echo "---------------------------------------------------------------"

   return 0

}

[ -f "$PACKAGE_GENERATE_STAMP" ] && sudo rm -f "$PACKAGE_GENERATE_STAMP"

echo -e "${MESSAGE_COLOR}Generating the package ${MESSAGE_COLOR_H}$PACKAGE${MESSAGE_COLOR} extension info files ... ${NORMAL}\c"
this_main > "$PACKAGE_MESSAGE_LOG" 2>&1
if [ "$?" -gt 0 ]; then
     echo "${ERROR_COLOR}failed!${NORMAL}"
     echo "${WARNING_COLOR}For details: ${WARNING_COLOR_H}buildit --print message${NORMAL}"
     exit 1
fi
echo "${MESSAGE_COLOR_H}successful!${NORMAL}"

touch "$PACKAGE_GENERATE_STAMP"

exit 0

