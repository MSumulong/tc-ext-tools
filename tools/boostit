#!/bin/sh

############################################################################
#                                                                          #
#             boostit: Boosts the package for the first time               #
#                                                                          #
############################################################################

#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Copyright (c) 2011 Sercan Arslan <arslanserc@gmail.com>
#

. /etc/init.d/tc-functions

TCEXTTOOLS_ROOT="$(dirname $0)/.."

if [ -f "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions" ]; then
     . "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/functions"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools functions file not found!${NORMAL}"
     exit 1
fi

print_usage(){

   cat << EOF
${RED}${THIS} usage:${NORMAL}

      ${GREEN}${THIS} <package> <version> <extensions> 
${BLUE}
      where;
             <package> is the package name.
             <version> is the version in numbers, svn, git, or any type of vcs system supported.
             <extensions> is the set of extensions. If it is not given, it is set to the package name.
${NORMAL}
EOF

}

if [ "$#" -lt 2 -o "$#" -gt 3 ]; then
   print_usage
   exit 1
else
   PACKAGE="$1"
   VERSION="$2"
fi

if [ "$#" -lt 3 ]; then
   EXTENSIONS="$PACKAGE"
else
   EXTENSIONS="$3"
fi

echo -e "${TCEXTTOOLS_MESSAGE_COLOR}Boosting the package with:"
echo -e "\n\t${TCEXTTOOLS_MESSAGE_COLOR}PACKAGE=${TCEXTTOOLS_WARNING_COLOR}$PACKAGE"
echo -e "\n\t${TCEXTTOOLS_MESSAGE_COLOR}VERSION=${TCEXTTOOLS_WARNING_COLOR}$VERSION"
echo -e "\n\t${TCEXTTOOLS_MESSAGE_COLOR}EXTENSIONS=${TCEXTTOOLS_WARNING_COLOR}$EXTENSIONS"
echo -e "\n${NORMAL}"

if [ -f "$PACKAGE_COMMON" ]; then
   print_it --error "This package looks to be boosted before."
   print_it --warning "If you continue existing files will be overwritten."
   print_it --message "Would you like you continue ? [y|yes or n|no]"
   read ans
   case "$ans" in
        y|yes)
          print_it "You agreed to continue. The files will be overwritten."
          ;;
        n|no)
          print_it "You don't want to continue ? Farewell!"
          exit 0
          ;;
        *)
          print_it --error "I don't understand what you are saying!"
          exit 1
          ;;
   esac
fi

this_main() {

   echo "---------------------------------------------------------------"
   echo ""
   echo "Boosting the package $PACKAGE inside the package root directory $PACKAGE_ROOT ..."
   echo ""
   echo "---------------------------------------------------------------"

   echo "Cleaning the package extensions directory."
   [ -d "$PACKAGE_EXTENSIONS" ] && rm -rf "$PACKAGE_EXTENSIONS"
   mkdir -p "$PACKAGE_EXTENSIONS" || return 1

   echo "Creating the package common file."
   if [ "$VERSION" = "svn" ]; then

        cat > "$PACKAGE_COMMON" << _EOF
PACKAGE="$PACKAGE"
VERSION="svn"
SOURCE="svn::"
BUILD_DEPENDS=""

DESCRIPTION="A brief description of package."
AUTHOR="authors of package"
SITE="http://www.package.com"
COPYING="GPL-2"
MAINTAINERS="$PACKAGE_MAINTAINER"
COMMENTS="This extension is PPI compatible."
CHANGELOG="---"
CURRENT="First Version"
_EOF

        [ "$?" -gt 0 ] && return 1

   elif [ "$VERSION" = "git" ]; then

        cat > "$PACKAGE_COMMON" << _EOF
PACKAGE="${PACKAGE}"
VERSION="git"
SOURCE="git::"
BUILD_DEPENDS=""

DESCRIPTION="A brief description of package."
AUTHOR="authors of package"
SITE="http://www.package.com"
COPYING="GPL-2"
MAINTAINERS="$PACKAGE_MAINTAINER"
COMMENTS="This extension is PPI compatible."
CHANGELOG="---"
CURRENT="First Version"
_EOF

        [ "$?" -gt 0 ] && return 1

   else

        cat > "$PACKAGE_COMMON" << _EOF
PACKAGE="$PACKAGE"
VERSION="$VERSION"
SOURCE=""
BUILD_DEPENDS=""

DESCRIPTION="A brief description of package."
AUTHOR="authors of package"
SITE="http://www.package.com"
COPYING="GPL-2"
MAINTAINERS="$PACKAGE_MAINTAINER"
COMMENTS="This extension is PPI compatible."
CHANGELOG="---"
CURRENT="First Version"
_EOF

        [ "$?" -gt 0 ] && return 1

   fi

   echo "Installing the package build."
   install -m 644 "$TCEXTTOOLS_ROOT/share/tc-ext-tools/build" "$PACKAGE_BUILD" || return 1

   echo "Creating the package extensions install and dep files."
   for EXTENSION in $EXTENSIONS
   do
       mkdir -p "$PACKAGE_EXTENSIONS/$EXTENSION" || return 1

       touch "$PACKAGE_EXTENSIONS/$EXTENSION/install" || return 1

       if [ "${EXTENSION%-doc}" = "$EXTENSION" ]; then
            touch "$PACKAGE_EXTENSIONS/$EXTENSION/dep" || return 1
       fi

       if [ "${EXTENSION%-locale}" != "$EXTENSION" ]; then
          echo "${EXTENSION%-locale}.tcz" > "$PACKAGE_EXTENSIONS/$EXTENSION/dep" || return 1
          echo "usr/local/share/locale" > "$PACKAGE_EXTENSIONS/$EXTENSION/install" || return 1
       elif [ -n "$(echo $EXTENSIONS | grep ${EXTENSION}-locale)" ]; then
          echo "usr/local" > "$PACKAGE_EXTENSIONS/$EXTENSION/install" || return 1
          echo "x-usr/local/share/locale" >> "$PACKAGE_EXTENSIONS/$EXTENSION/install" || return 1
       fi
   done

   echo "---------------------------------------------------------------"
   echo ""
   echo "Boosted the package $PACKAGE successfully."
   echo ""
   echo "---------------------------------------------------------------"

   return 0

}

print_it "Boosting the package $PACKAGE ... \c"
this_main > /tmp/boostit.log 2>&1
if [ "$?" -gt 0 ]; then
     print_it --error "failed!"
     print_it --warning "See /tmp/boostit.log for details."
     exit 1
fi
print_it --hilight "successful!"

exit 0

