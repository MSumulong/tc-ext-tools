#summary A brief introduction to tc-ext-tools

= Introduction =

tc-ext-tools is a package build system developed for Tiny Core Linux. The main aim of the project is to create a high level, easy package maintenance system for package maintainers from Tiny Core Linux.

= Design Concepts =

 * Divide and conquer.
  * The building process of a package is a step by step procedure.
 * Fast initial packaging time.
  * A new package can be created in just a few minutes.
 * Easy maintenance of packages.
  * Updating a package is a simple task of editing just a few lines.
 * Each package has a source, and the source is an online archive file or a vcs repository.
  * Multiple source packages are also supported via custom defined rules.
 * Extensions are created from packages.
  * There is a distinction between the package and the extension terms.
  * Here we refer to a package as the parent of its extensions.
 * Host the packages at an online vcs repository.
  * Track and save the changes applied to the packages with a version control system (svn).
 * Support for Tiny Core Linux specific features (tce.installed, wbar icon etc.)
  * Create wbar icon, install script, adjust directory access rights without being expert about Tiny Core Linux.
 * Error handling.
  * Inform the user when an error occurs about the details.

= Installation =

Check out the latest source code from svn repository and follow the instructions in the INSTALL file.

{{{
svn checkout http://tc-ext-tools.googlecode.com/svn/trunk tc-ext-tools
cd tc-ext-tools
cp config.sample .config
./install.sh
}}}

= Usage =

== Hello World ==
  * See how easy it is to build a package
{{{
svn checkout http://tc-ext-tools.googlecode.com/svn/tc-packages/libdvbpsi
cd libdvbpsi
buildit
}}}

== Creating a new package ==
  * First add the package with addit
{{{
addit <package> <version> "extension1 extension2 ..."
}}}
_Hint: version can be a number, "svn" or "git"._

  * Then edit the files generated under the package root directory by using your favorite file manager and text editor.

  * Most important variables that you need to specify in the common file are SOURCE, and BUILD_DEPENDS. You also need to define configure, compile, install, and rules functions in the package build file.
_Note: The rules function is placed in the build file to give complete control to the user for defining the package build rules._

_Hint: SOURCE can be the direct link to a tarball or the url of an svn or git repository._

  * Then you can execute buildit in the package root directory to build the package with the rules defined in the build file.
{{{
buildit
}}}
  * When creating a package for the first time you better advance step by step.
{{{
buildit -c,clean|-l,load|-d,download|-x,convert|-u,unpack|-pt,patch|-cn,configure|-cm,compile|-i,install|-sp,split|-st,strip|-cr,create|-ch,check|-g,generate|-pk,package|-e,encrypt|-p,print|-h,help
}}}
  * There is also custom build function support which can be used for defining custom functions.
{{{
buildit -cs|custom <function>
}}}
_Hint: You need to define `build_<function>` in the package build file._
  * If you want to see configure, compile, install output messages.
{{{
buildit -p|print -cn|configure|-cm|compile|-i|install
}}}
  * If an error occurs or you want to see low level messages.
{{{
buildit -p|print -m|message
}}}

=== See other available packages for more. ===
{{{
svn checkout http://tc-ext-tools.googlecode.com/svn/tc-packages/
}}}

== tc-ext-tools shell environment ==

The shell environment is to make your life easier by implementing special shell functions such as changing parent's directory to a package's root directory, searching in the package, listing the contents of a package or even editing the package files.

_Note: A reboot or relogin is required for tc-ext-tools shell functions to be available for the first time installation._

=== update-tet-database ===
  * Create a database from the packages located in the packages directory.
{{{
update-tet-database
}}}

=== tetls ===
  * List the contents of a package
{{{
tetls <package>
}}}
_Hint: If `<package>` is left blank, tetls lists all available packages._

=== tetcd ===
  * Change directory to a package's root
{{{
tetcd <package>
}}}
_Hint: If `<package>` is left blank, tetcd changes directory to the packages directory._

=== tetfind ===
  * Find files in the package
{{{
tetfind <package> <file>
}}}
_Hint: If no argument is given, tetfind finds all the files in the packages directory. If only `<file>` is left blank, tetfind finds all the files in the package._

=== teted ===
  * Edit the files of a package
{{{
teted <package> <file>
}}}
_Hint: If `<file>` is left blank, teted lists all the files in the package and asks you which one to edit. If a file name is specified it searches for the files with the name in the package, and if more than one file is found with the same name it asks you which one to edit. If the search matches only one file it opens the file for you to edit._

*Important Note: This project is still under development and considered to be in alpha stage. So any suggestion or critiques welcome.*

*Sercan Arslan <arslanserc@gmail.com>*