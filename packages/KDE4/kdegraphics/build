#
# tc-ext-tools build functions: configure, compile, install, rules
#

build_download() {

  [ -d modules ] || mkdir modules

  for MODULE in $MODULES
  do
     echo "Downloading ${MODULE}-${VERSION}.tar.bz2" 
     wget -c "$MIRROR/${MODULE}-${VERSION}.tar.bz2" -O "modules/${MODULE}-${VERSION}.tar.bz2" || return 1
  done

  rm -f "$PACKAGE_SOURCE_CONV"
  cd modules
  tar -cvJf "$PACKAGE_SOURCE_CONV" *

}

build_unpack() {

  for MODULE in $MODULES
  do
     echo "Extracting ${MODULE}-${VERSION}.tar.bz2"
     tar xf "$_P_SRC/modules/${MODULE}-${VERSION}.tar.bz2" || return 1
  done

}

build_preconf() {

  cd $P_SRC_TMP
  for MODULE in libkdcraw libkipi libkexiv2 libksane
  do
     cd ${MODULE}-${VERSION}
     mkdir build
     cd build
     cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release .. || return 1
     make || return 1
     sudo make install || return 1
     sudo ldconfig
     cd ../..
  done

}

build_configure() {

  for MODULE in $MODULES
  do
     cd ${MODULE}-${VERSION}
     [ -d build ] || mkdir build
     cd build
     cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release .. || return 1
     cd ../..
  done

}

build_compile() {

  for MODULE in $MODULES
  do
     cd ${MODULE}-${VERSION}
     cd build
     make || return 1
     cd ../..
  done

}

build_install() {

  for MODULE in $MODULES
  do
     cd ${MODULE}-${VERSION}
     cd build
     make DESTDIR="$INSTALL_ROOT" install || return 1
     cd ../..
  done

}

build_rules() {

  tet_load
  tet_download
  tet_unpack
  tet_custom preconf
  tet_configure
  tet_compile
  tet_install
  tet_split
  tet_strip
  tet_create
  tet_generate
  tet_check
   tet_test
  tet_package
   tet_encrypt

}
