#
#  functions: common tc-ext-tools functions and definitions
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  (C) Copyright 2010 Sercan Arslan
#

THIS=$(basename $0)

if [ $(id -u) = 0 ] ; then
     if [ "$THIS" != "installit" ]; then
          echo "${RED}Do not run ${THIS} as root!${NORMAL}"
          exit 1
     fi
else
     if [ "$THIS" = "installit" ]; then
          echo "${RED}You need to run ${THIS} as root!${NORMAL}"
          exit 1
     fi
fi

if [ -f "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/config" ]; then
     . "$TCEXTTOOLS_ROOT/etc/tc-ext-tools/config"
else
     echo "${RED}$(basename $0):${BLUE} tc-ext-tools default configuration file not found!${NORMAL}"
     exit 1
fi

if [ -f "$HOME/.tc-ext-tools/config" ]; then
     . "$HOME/.tc-ext-tools/config"
else
    echo "${RED}$(basename $0):${BLUE} tc-ext-tools user configuration file not found!${NORMAL}"
    exit 1
fi

print_it() {
  case  "$1" in
        error)
                [ -z "$2" ] && echo -e "${TCEXTTOOLS_MESSAGE_COLOR}$1${NORMAL}"
                echo -e "${TCEXTTOOLS_ERROR_COLOR}$2${NORMAL}"
                ;;
        warning)   
                [ -z "$2" ] && echo -e "${TCEXTTOOLS_MESSAGE_COLOR}$1${NORMAL}"
                echo -e "${TCEXTTOOLS_WARNING_COLOR}$2${NORMAL}"
                ;;
        hilight)   
                [ -z "$2" ] && echo -e "${TCEXTTOOLS_MESSAGE_COLOR}$1${NORMAL}"
                echo -e "${TCEXTTOOLS_HILIGHT_COLOR}$2${NORMAL}"
                ;;
        *)
                echo -e "${TCEXTTOOLS_MESSAGE_COLOR}$1${NORMAL}"
                ;;
  esac
}

PACKAGE_ROOT="$PWD"
PACKAGE_COMMON="$PACKAGE_ROOT/$TCEXTTOOLS_COMMON"
PACKAGE_BUILD="$PACKAGE_ROOT/$TCEXTTOOLS_BUILD"
PACKAGE_SRC="$PACKAGE_ROOT/$TCEXTTOOLS_SRC"
PACKAGE_EXTENSIONS="$PACKAGE_ROOT/$TCEXTTOOLS_EXTENSIONS"
PACKAGE_PATCHES="$PACKAGE_SRC/$TCEXTTOOLS_PATCHES"

if [ -e "$PACKAGE_COMMON" ]; then
     . "$PACKAGE_COMMON"

     TCEXTTOOLS_BIN="$TCEXTTOOLS_STORAGE/$PACKAGE/$TCEXTTOOLS_BIN"
     TCEXTTOOLS_SRC="$TCEXTTOOLS_STORAGE/$PACKAGE/$TCEXTTOOLS_SRC"
     TCEXTTOOLS_PKG="$TCEXTTOOLS_STORAGE/$PACKAGE/$TCEXTTOOLS_PKG/$PACKAGE"
     TCEXTTOOLS_LOG="$TCEXTTOOLS_STORAGE/$PACKAGE/$TCEXTTOOLS_LOG"
     TCEXTTOOLS_EXTENSIONS="$TCEXTTOOLS_STORAGE/$PACKAGE/$TCEXTTOOLS_EXTENSIONS"

     TCEXTTOOLS_BIN_TEMP="$TCEXTTOOLS_BIN/temp"
     TCEXTTOOLS_SRC_TEMP="$TCEXTTOOLS_SRC/temp"

     TCEXTTOOLS_DOWNLOAD_LOG="$TCEXTTOOLS_LOG/download.txt"
     TCEXTTOOLS_CONFIGURE_LOG="$TCEXTTOOLS_LOG/configure.txt"
     TCEXTTOOLS_COMPILE_LOG="$TCEXTTOOLS_LOG/compile.txt"
     TCEXTTOOLS_INSTALL_LOG="$TCEXTTOOLS_LOG/install.txt"
     TCEXTTOOLS_BUILD_LOG="$TCEXTTOOLS_LOG/build.txt"
     TCEXTTOOLS_ERROR_LOG="$TCEXTTOOLS_LOG/error.txt"
     TCEXTTOOLS_ERROR_LOG_2="$TCEXTTOOLS_LOG/error2.txt"

     if [ -n "$BUILD_DEPENDS" ]; then
          BUILD_DEPENDS="$TCEXTTOOLS_DEPENDS $BUILD_DEPENDS"
     else
          BUILD_DEPENDS="$TCEXTTOOLS_DEPENDS"
     fi

     [ -d "$TCEXTTOOLS_BIN" ] || install -m 755 -d "$TCEXTTOOLS_BIN"
     [ -d "$TCEXTTOOLS_SRC" ] || install -m 755 -d "$TCEXTTOOLS_SRC"
     [ -d "$TCEXTTOOLS_PKG" ] || install -m 755 -d "$TCEXTTOOLS_PKG"
     [ -d "$TCEXTTOOLS_BIN_TEMP" ] || install -m 755 -d "$TCEXTTOOLS_BIN_TEMP"
     [ -d "$TCEXTTOOLS_SRC_TEMP" ] || install -m 755 -d "$TCEXTTOOLS_SRC_TEMP"
     [ -d "$TCEXTTOOLS_LOG" ] || install -m 755 -d "$TCEXTTOOLS_LOG"

     # determine the type of package source from the supported generic types
     if [ ! "${SOURCE%.bz2}" = "$SOURCE" ]; then
            SOURCE_TYPE="bz2"
            CONVERTED_SOURCE="${SOURCE%.bz2}.xz"
     elif [ ! "${SOURCE%.gz}" = "$SOURCE" ]; then
            SOURCE_TYPE="gz"
            CONVERTED_SOURCE="${SOURCE%.gz}.xz"
     elif [ ! "${SOURCE%.tgz}" = "$SOURCE" ]; then
            CONVERTED_SOURCE="${SOURCE%.tgz}.tar.xz"
            SOURCE_TYPE="tgz"
     elif [ ! "${SOURCE%.zip}" = "$SOURCE" ]; then
            SOURCE_TYPE="zip"
            CONVERTED_SOURCE="${SOURCE%.zip}.tar.xz"
     elif [ ! "${SOURCE%.xz}" = "$SOURCE" ]; then
            SOURCE_TYPE="xz"
            CONVERTED_SOURCE="$SOURCE"
     else
            # the user have to define custom build_unpack, and build_convert functions in the build file for custom package sources
            [ -z "$SOURCE_TYPE" ] && SOURCE_TYPE="custom"
            [ -z "$CONVERTED_SOURCE" ] && CONVERTED_SOURCE="${SOURCE%.*}.tar.xz"
     fi

     TCEXTTOOLS_SOURCE="$TCEXTTOOLS_SRC/$SOURCE"
     TCEXTTOOLS_TOP_SRC="$TCEXTTOOLS_BIN_TEMP/$TOP_SRC"
     TCEXTTOOLS_CONVERTED_SOURCE="$TCEXTTOOLS_SRC/$CONVERTED_SOURCE"
     TCEXTTOOLS_INSTALL_ROOT="$TCEXTTOOLS_BIN/root"

     PACKAGE_SOURCE="$TCEXTTOOLS_SOURCE"
     PACKAGE_TOP_SRC="$TCEXTTOOLS_TOP_SRC"
     PACKAGE_CONVERTED_SOURCE="$TCEXTTOOLS_CONVERTED_SOURCE"
     PACKAGE_INSTALL_ROOT="$TCEXTTOOLS_INSTALL_ROOT"

     INSTALL_ROOT="$PACKAGE_INSTALL_ROOT"

     #EXTENSIONS=$(echo $EXTENSIONS | sed -e "s/KERNEL/$(uname -r)/g")

elif [ "$THIS" != "boostit" ]; then
     print_it error "the package $PACKAGE common file not found!"
     print_it warning "You must boost it first!"
     exit 1
fi

if [ -e "$PACKAGE_BUILD" ]; then
     . "$PACKAGE_BUILD"
elif [ "$THIS" != "boostit" ]; then
     print_it error "the package $PACKAGE build file not found!"
     exit 1
fi

# tc user
TCUSER=$(cat /etc/sysconfig/tcuser)

if [ "$THIS" = "installit" ]; then
     su "$TCUSER" -c "touch $TCEXTTOOLS_ERROR_LOG_2"
fi

# date
YEAR=$(date +%Y)
MONTH=$(date +%m)
DAY=$(date +%d)
DATE="$YEAR/$MONTH/$DAY"

# kernel version
KERNELVER=$(uname -r)

# export environment variables
export CFLAGS CXXFLAGS LDFLAGS

